clear
clc
table=readtable('mood.csv');
table.answer_timestamp=erase(table.answer_timestamp,"+01:00");
table.answer_timestamp=erase(table.answer_timestamp,"+02:00");
table.answer_timestamp=datetime(table.answer_timestamp);
table.timestamp=[];
table.valence_scale_ini=[];
table.arousal_scale_ini=[];
table.input_method=[];
% Group based on participant column
par=unique(table{:,1},'stable');
% split based on participant column
for i=1:size(par,1)
             T_split{i,:}=table(table.participant == par(i),:);
end


% create fifth column with time
for i=1:size(T_split,1)
       for j=1:size(T_split{i,1}.answer_timestamp,1)
                  [h,m,s] = hms(T_split{i,1}.answer_timestamp(j));
                   T_split{i,1}.time(j)=duration(h,m,s);
       end
end

%create sixth column with time segment information
edges = duration(0:4:24,0,0);
for i=1:size(T_split,1)
                    T_split{i,1}.time_segment = discretize(T_split{i,1}.time,edges,'IncludedEdge','right');
end


% create a column with time difference from begining of time
for i=1:size(T_split,1)
       for j=1:size(T_split{i,1}.answer_timestamp,1)
               T_split{i,1}.answer_timestamp_from_begining(j)=T_split{i,1}.answer_timestamp(j) - T_split{i,1}.answer_timestamp(1);
       end
end

%remove particpants with less than 10 recording
for i=1:size(T_split,1)
          sz(i,1)=size(T_split{i,1},1) ;
end 
rm=find(sz<=10);
T_split(rm)=[];


% find participants with wrong sorting of duration
for i=1:size(T_split,1)   
                    correct(i,1)=issorted(T_split{i,1}.answer_timestamp_from_begining);
                    wrong=find(~correct);
end            
         


% 3d scatter plot animation
%scatter3(T_split{1,2},T_split{1,3},T_split{1,4},100,'MarkerEdgeColor','k',...
        'MarkerFaceColor',[0 .75 .75])
%C=[1:150];
%scatter3(T_split{1,2},T_split{1,3},T_split{1,4},100,C)
%colormap(gca,"winter")
%view(-30,10)

%3d plot animation
s=1;
for i=1:length(T_split{s,1}.participant)
       plot3(T_split{s,1}.answer_timestamp_from_begining(i),T_split{s,1}.valence(i),T_split{s,1}.arousal(i),'-o','Color','b','MarkerSize',10,'MarkerFaceColor','c')
       hold on;
       ax = gca;
       ax.YDir = 'reverse';
       xlim([min(T_split{s,1}.answer_timestamp_from_begining),max(T_split{s,1}.answer_timestamp_from_begining)]);
       ylim([-50,50]);
       zlim([0,100]);
       xlabel('Time (minutes)');
       ylabel('Valence');
       zlabel('Arousal');
       pause(0.1);
end

for i=1:145
                 plot(val1(i),val2(i),'o','Color','b','MarkerSize',10,'MarkerFaceColor','c')
                 hold on
                 ylim([-50,50]);
                 xlim([-50,50]);
                 %xlim([0,100]);
                 %ylim([0,100]);
                 pause(0.3);
end
 

%plot3(T_split{1,2},T_split{1,3},T_split{1,4},'*r')
x=minutes(x);
dt = delaunayTriangulation(x,y) ;
tri = dt.ConnectivityList ;
xi = dt.Points(:,1) ; 
yi = dt.Points(:,2) ; 
F = scatteredInterpolant(x,y,z);
zi = F(xi,yi) ;
trisurf(tri,xi,yi,zi) 
view(2)
shading interp


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
x=T_split{1,2};
y=T_split{1,3};
z=T_split{1,4};
x=minutes(x);
[X Y]=meshgrid(x,y);
Z=griddata(x,y,z, X,Y);
s= surf(X,Y,Z,'FaceAlpha',0.5);
s.EdgeColor = 'none';

meshz(X,Y,Z) 

surfl(X,Y,Z)
shading interp
colormap(gray);



[Nx,Ny,Nz] = surfnorm(X,Y,Z);
quiver3(X,Y,Z,Nx,Ny,Nz)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% waterfall plot

[Y X]=meshgrid(y,x);
Z=griddata(y,x,z, Y,X);
p=waterfall(Y,X,Z);
p.EdgeColor = 'b';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

gx=gradient(x);

gy=gradient(y);

gz=gradient(z);

quiver(y,z,gy,gz,0)
axis equal

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
for k=1:size(T_split,1)
                      Date{k,1}=dateshift(T_split{k,2},'start','day');
                      Date{k,1}.Format='MM/dd/yyyy';
end
T_split.Date=Date;
% Group based on date
dt = findgroups(Date);
% split based on participant column
T_subsplit = splitapply( @(varargin) varargin, T_split , dt);
